name: Deploy Updates

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  deploy-update:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine version bump
        id: version
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Check commit message for version bump indicators
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          # Handle both direct commits and merge commits
          if [[ "$COMMIT_MSG" =~ BREAKING.*CHANGE ]] || [[ "$COMMIT_MSG" =~ !: ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "Version bump: MAJOR (breaking change detected)"
          elif [[ "$COMMIT_MSG" =~ feat ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "Version bump: MINOR (new feature detected)"
          elif [[ "$COMMIT_MSG" =~ fix ]]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Version bump: PATCH (bug fix detected)"
          else
            echo "bump=none" >> $GITHUB_OUTPUT
            echo "No version bump needed"
          fi

      - name: Bump version
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.version.outputs.bump != 'none'
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Get current version
          CURRENT_VERSION=$(jq -r '.expo.version' app.json)
          echo "Current version: $CURRENT_VERSION"
          
          # Calculate new version
          BUMP_TYPE="${{ steps.version.outputs.bump }}"
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case $BUMP_TYPE in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
          esac
          
          echo "New version: $NEW_VERSION"
          
          # Update app.json
          jq --arg version "$NEW_VERSION" '.expo.version = $version' app.json > tmp.json && mv tmp.json app.json
          
          # Commit version bump
          git add app.json
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git push

      - name: Set Runtime Version
        run: |
          APP_VERSION=$(jq -r '.expo.version' app.json)
          MAJOR_VERSION=$(echo $APP_VERSION | cut -d. -f1)
          jq --arg version "$MAJOR_VERSION" '.expo.runtimeVersion = $version' app.json > tmp.json && mv tmp.json app.json

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Deploy preview update for PR
        if: github.event_name == 'pull_request'
        run: |
          echo "Deploying preview update for PR #${{ github.event.number }}"
          eas update --branch preview --message "Preview update for PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}"

      - name: Deploy production update on main
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Deploying production update"
          eas update --branch production --message "Auto-update from commit ${{ github.sha }}: ${{ github.event.head_commit.message }}"

      - name: Comment on PR with update info
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Preview update deployed! Users with preview builds will receive this update automatically.'
            })

      - name: Comment on main push with update info
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            });
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: 'âœ… Production update deployed! Users will receive this update automatically on next app launch.'
            }); 